names(summary(fit.glmmPQL))
summary(fit.glmmPQL)$coef
?glmmPQL
summary(fit.glmmPQL)
a <- summary(fit.glmmPQL)
a$coefficients
a$varFix
a$groups
a$fitted
a$corFixed
a$BIC
a$contrasts
a$modelStruct
a$dims
a$sigma
a$apVar
a$logLik
a$terms
summary(fit.glmmPQL)
fit.glmmML <- glmmML(formula = nausea ~ coded_week + rx + coded_week*rx + week4 + week4*rx,
family = binomial, data = nausea, cluster = publicid,
start.coef = c(-3.954129, -0.001117, 0.156499, 0.664287, -0.002275, 0.572121))
fit.glmmML$converged # TRUE
summary(fit.glmmML)
fit.glmmML <- glmmML(formula = nausea ~ coded_week + rx + coded_week*rx + week4 + week4*rx,
family = binomial, data = nausea, cluster = publicid,
start.coef = c(-3.954129, -0.001117, 0.156499, 0.664287, -0.002275, 0.572121),
prior = "logistic")
fit.glmmML$converged # TRUE
summary(fit.glmmML)
fit.glmmML <- glmmML(formula = nausea ~ coded_week + rx + coded_week*rx + week4 + week4*rx,
family = binomial, data = nausea, cluster = publicid,
start.coef = c(-3.954129, -0.001117, 0.156499, 0.664287, -0.002275, 0.572121),
prior = "cauchy")
fit.glmmML$converged # TRUE
summary(fit.glmmML)
summary(fit.glmmPQL)
fit.glmmML <- glmmML(formula = nausea ~ coded_week + rx + coded_week*rx + week4 + week4*rx,
family = binomial, data = nausea, cluster = publicid,
#start.coef = c(-3.954129, -0.001117, 0.156499, 0.664287, -0.002275, 0.572121),
prior = "cauchy")
fit.glmmML$converged # TRUE
summary(fit.glmmML)
fit.glmmML <- glmmML(formula = nausea ~ coded_week + rx + coded_week*rx + week4 + week4*rx,
family = binomial, data = nausea, cluster = publicid,
prior = "cauchy", method="ghq")
fit.glmmML$converged # TRUE
summary(fit.glmmML)
fit.glmmML <- glmmML(formula = nausea ~ coded_week + rx + coded_week*rx + week4 + week4*rx,
family = binomial, data = nausea, cluster = publicid,
prior = "gaussian", method="ghq")
fit.glmmML$converged # TRUE
summary(fit.glmmML)
eek + rx + coded_week*rx + week4 + week4*rx,
family = binomial, data =
summary(fit.glmmPQL) # less accurate
fit.glmmML <- glmmML(formula = nausea ~ coded_week + rx + coded_week*rx + week4 + week4*rx,
family = binomial, data = nausea, cluster = publicid,
method="ghq")
fit.glmmML$converged # TRUE
summary(fit.glmmML)
fit.glmmML <- glmmML(formula = nausea ~ coded_week + rx + coded_week*rx + week4 + week4*rx,
family = binomial, data = nausea, cluster = publicid,
method="Laplace")
fit.glmmML <- glmmML(formula = nausea ~ coded_week + rx + coded_week*rx + week4 + week4*rx,
family = binomial, data = nausea, cluster = publicid,
method="ghq")
fit.glmmML$converged # TRUE
summary(fit.glmmML)
View(cd4)
# plot
table(cd4$coded_week)
n.visit <- length(table(cd4$coded_week))
n.visit
mat = match(cd4$publicid, hivfollowup$publicid)
cd4$rx <- hivfollowup$rx[mat]
perc.trt <- rep(NA, n.week)
View(cd4)
View(hivfollowup)
View(hivrna)
unique(cd4$publicid)
hivfollowup$publicid[hivfollowup$event==1]
all(hivfollowup$publicid[hivfollowup$event==1] %in% unique(cd4$publicid))
mat = match(cd4$publicid, hivfollowup$publicid)
cd4$event <- hivfollowup$event[mat]
View(cd4)
View(cd4)
cd4 <- cd4[cd4$event==0,]
View(cd4)
load("/Users/yhu30/OneDrive - Emory University/yijuanhu/SERVICE/2023-05_QualifyingExam/DATA/iPrEx.Rdata")
# plot
table(cd4$coded_week)
n.visit <- length(table(cd4$coded_week))
n.visit
mat = match(cd4$publicid, hivfollowup$publicid)
cd4$event <- hivfollowup$event[mat]
all(hivfollowup$publicid[hivfollowup$event==1] %in% unique(cd4$publicid)) # TRUE
cd4 <- cd4[cd4$event==1,]
View(cd4)
cd4.trt <- rep(NA, n.week)
cd4.placebo <- rep(NA, n.week)
cd4.trt <- rep(NA, n.visit)
cd4.placebo <- rep(NA, n.visit)
names(table(cd4$coded_week)
)[
)
names(table(cd4$coded_week))
load("/Users/yhu30/OneDrive - Emory University/yijuanhu/SERVICE/2023-05_QualifyingExam/DATA/iPrEx.Rdata")
# plot
table(cd4$coded_week)
n.visit <- length(table(cd4$coded_week))
mat = match(cd4$publicid, hivfollowup$publicid)
cd4$event <- hivfollowup$event[mat]
cd4$rx <- hivfollowup$rx[mat]
all(hivfollowup$publicid[hivfollowup$event==1] %in% unique(cd4$publicid)) # TRUE
cd4 <- cd4[cd4$event==1,]
cd4.trt <- rep(NA, n.visit)
cd4.placebo <- rep(NA, n.visit)
View(cd4)
View(cd4)
for (tt in 1:n.visit) {
week <- as.numeric(names(table(cd4$coded_week))[tt])
w1 <- which(cd4$coded_week == week & cd4$rx==1)
cd4.trt[tt] <- mean(cd4$cd4absolute[w1])
w0 <- which(cd4$coded_week == week & cd4$rx==0)
cd4.placebo[tt] <- mean(cd4$cd4absolute[w0])
}
plot(y=cd4.trt, x=as.numeric(names(table(cd4$coded_week)), ylab="CD4+ T Cell Count per uL", xlab="Weeks Since Seroconversion")
)
plot(y=cd4.trt, x=as.numeric(names(table(cd4$coded_week))), ylab="CD4+ T Cell Count per uL", xlab="Weeks Since Seroconversion")
plot(y=cd4.trt, x=as.numeric(names(table(cd4$coded_week))),
ylab="CD4+ T Cell Count per uL",
xlab="Weeks Since Seroconversion",
col="blue", pch=16)
plot(y=cd4.trt, x=as.numeric(names(table(cd4$coded_week))),
ylab="CD4+ T Cell Count per uL",
xlab="Weeks Since Seroconversion",
col="blue", pch=16, type="b")
plot(y=cd4.trt, x=as.numeric(names(table(cd4$coded_week))),
ylab="CD4+ T Cell Count per uL", ylim=c(300, 800),
xlab="Weeks Since Seroconversion",
col="blue", pch=16, type="b")
axis(side=1, at=as.numeric(names(table(cd4$coded_week))), labels=names(table(cd4$coded_week)))
# plot
table(cd4$coded_week)
as.numeric(names(table(cd4$coded_week)))
axis(side=1, at=as.numeric(names(table(cd4$coded_week))), labels=names(table(cd4$coded_week)))
plot(y=cd4.trt, x=as.numeric(names(table(cd4$coded_week))),
ylab="CD4+ T Cell Count per uL", ylim=c(300, 800),
xlab="Weeks Since Seroconversion", axes="n",
col="blue", pch=16, type="b")
axis(side=1, at=as.numeric(names(table(cd4$coded_week))), labels=names(table(cd4$coded_week)))
plot(y=cd4.trt, x=as.numeric(names(table(cd4$coded_week))),
ylab="CD4+ T Cell Count per uL", ylim=c(300, 800),
xlab="Weeks Since Seroconversion", xaxes="n",
col="blue", pch=16, type="b")
axis(side=1, at=as.numeric(names(table(cd4$coded_week))), labels=names(table(cd4$coded_week)))
plot(y=cd4.trt, x=as.numeric(names(table(cd4$coded_week))),
ylab="CD4+ T Cell Count per uL", ylim=c(300, 800),
xlab="Weeks Since Seroconversion", xaxt="n",
col="blue", pch=16, type="b")
axis(side=1, at=as.numeric(names(table(cd4$coded_week))), labels=names(table(cd4$coded_week)))
points(cd4.placebo, col="red", type="b", pch=16)
legend("topright", legend=c("Placebo", "FTC/TDF"), pch=16, col=c("red", "blue"))
plot(y=cd4.trt, x=coded_week,
ylab="CD4+ T Cell Count per uL", ylim=c(300, 800),
xlab="Weeks Since Seroconversion", xaxt="n",
col="blue", pch=16, type="b")
coded_week <- as.numeric(names(table(cd4$coded_week)))
coded_week
plot(y=cd4.trt, x=coded_week,
ylab="CD4+ T Cell Count per uL", ylim=c(300, 800),
xlab="Weeks Since Seroconversion", xaxt="n",
col="blue", pch=16, type="b")
axis(side=1, at=coded_week, labels=coded_week)
points(y=cd4.placebo, x=coded_week, col="red", type="b", pch=16)
legend("topright", legend=c("Placebo", "FTC/TDF"), pch=16, col=c("red", "blue"))
load("/Users/yhu30/OneDrive - Emory University/yijuanhu/SERVICE/2023-05_QualifyingExam/DATA/iPrEx.Rdata")
# plot
table(cd4$coded_week)
coded_week <- as.numeric(names(table(cd4$coded_week)))
n.visit <- length(table(cd4$coded_week))
mat = match(cd4$publicid, hivfollowup$publicid)
cd4$event <- hivfollowup$event[mat]
cd4$rx <- hivfollowup$rx[mat]
all(hivfollowup$publicid[hivfollowup$event==1] %in% unique(cd4$publicid)) # TRUE
cd4.trt <- rep(NA, n.visit)
cd4.placebo <- rep(NA, n.visit)
for (tt in 1:n.visit) {
week <- coded_week[tt]
w1 <- which(cd4$coded_week == week & cd4$rx==1)
cd4.trt[tt] <- mean(cd4$cd4absolute[w1])
w0 <- which(cd4$coded_week == week & cd4$rx==0)
cd4.placebo[tt] <- mean(cd4$cd4absolute[w0])
}
plot(y=cd4.trt, x=coded_week,
ylab="CD4+ T Cell Count per uL", ylim=c(300, 800),
xlab="Weeks Since Seroconversion", xaxt="n",
col="blue", pch=16, type="b")
axis(side=1, at=coded_week, labels=coded_week)
points(y=cd4.placebo, x=coded_week, col="red", type="b", pch=16)
legend("topright", legend=c("Placebo", "FTC/TDF"), pch=16, col=c("red", "blue"))
View(cd4)
View(cd4)
library(lme4)
library(nlme)
library(lme4)
hist(cd4$cd4absolute)
hist(log(cd4$cd4absolute))
par(mfrow=c(1,2), pty="s")
par(mfrow=c(1,2), pty="s")
hist(cd4$cd4absolute)
hist(log(cd4$cd4absolute))
fit.glmmML <- glmmML(formula = nausea ~ coded_week + rx + coded_week:rx + week4 + week4:rx,
family = binomial, data = nausea, cluster = publicid,
method="ghq")
mat = match(nausea$publicid, hivfollowup$publicid)
nausea$rx <- hivfollowup$rx[mat]
perc.trt <- rep(NA, n.week)
perc.placebo <- rep(NA, n.week)
for (tt in 1:n.week) {
week <- as.numeric(names(table(nausea$coded_week))[tt])
w1 <- which(nausea$coded_week == week & nausea$rx==1)
perc.trt[tt] <- mean(nausea$nausea[w1])
w0 <- which(nausea$coded_week == week & nausea$rx==0)
perc.placebo[tt] <- mean(nausea$nausea[w0])
}
nausea$week4 <- ifelse(nausea$coded_week==4, 1, 0)
fit.glmmML <- glmmML(formula = nausea ~ coded_week + rx + coded_week:rx + week4 + week4:rx,
family = binomial, data = nausea, cluster = publicid,
method="ghq")
fit.glmmML$converged # TRUE
summary(fit.glmmML)
lmm1 <- lme(cd4absolute ~ rx + coded_week + rx:coded_week,
random = ~1|publicid, method = "ML", data=cd4)
summary(lmm1)
lmm2 <- lme(cd4absolute ~ coded_week,
random = ~1|publicid, method = "ML", data=cd4)
summary(lmm2)
anova(lmm1, lmm2)
cd4$coded_week2 <- cd4$coded_week^2
lmm3 <- lme(cd4absolute ~ rx + coded_week + coded_week2 + rx:coded_week + rx:coded_week2,
random = ~1|publicid, method = "ML", data=cd4)
summary(lmm3)
anova(lmm1, lmm2, lmm3)
anova(lmm1, lmm2, lmm3)
lmm1 <- lme(cd4absolute ~ rx + coded_week + coded_week2 + rx:coded_week + rx:coded_week2,
random = ~1|publicid, method = "ML", data=cd4)
summary(lmm1)
lmm2 <- lme(cd4absolute ~ rx + coded_week + rx:coded_week,
random = ~1|publicid, method = "ML", data=cd4)
summary(lmm2)
lmm3 <- lme(cd4absolute ~ coded_week,
random = ~1|publicid, method = "ML", data=cd4)
summary(lmm3)
anova(lmm1, lmm2, lmm3)
lmm3 <- lme(cd4absolute ~ coded_week + coded_week2,
random = ~1|publicid, method = "ML", data=cd4)
summary(lmm3)
lmm4 <- lme(cd4absolute ~ coded_week,
random = ~1|publicid, method = "ML", data=cd4)
summary(lmm4)
anova(lmm1, lmm2, lmm3, lmm4)
summary(lmm3)
lmm4 <- lme(cd4absolute ~ coded_week,
random = ~1|publicid, method = "ML", data=cd4)
summary(lmm4)
anova(lmm1, lmm2, lmm3, lmm4)
View(hivrna)
View(hivrna)
# plot
table(hivrna$coded_week)
coded_week <- as.numeric(names(table(hivrna$coded_week)))
n.visit <- length(table(hivrna$coded_week))
n.visit
mat = match(hivrna$publicid, hivfollowup$publicid)
hivrna$event <- hivfollowup$event[mat]
hivrna$rx <- hivfollowup$rx[mat]
all(hivfollowup$publicid[hivfollowup$event==1] %in% unique(hivrna$publicid)) # TRUE
cd4.trt <- rep(NA, n.visit)
hivrna.trt <- rep(NA, n.visit)
hivrna.placebo <- rep(NA, n.visit)
for (tt in 1:n.visit) {
week <- coded_week[tt]
w1 <- which(hivrna$coded_week == week & hivrna$rx==1)
hivrna.trt[tt] <- mean(hivrna$cd4absolute[w1])
w0 <- which(hivrna$coded_week == week & hivrna$rx==0)
hivrna.placebo[tt] <- mean(hivrna$cd4absolute[w0])
}
warnings()
tt=1
week <- coded_week[tt]
week
w1 <- which(hivrna$coded_week == week & hivrna$rx==1)
w1
hivrna$cd4absolute[w1]
hivrna.trt <- rep(NA, n.visit)
hivrna.placebo <- rep(NA, n.visit)
for (tt in 1:n.visit) {
week <- coded_week[tt]
w1 <- which(hivrna$coded_week == week & hivrna$rx==1)
hivrna.trt[tt] <- mean(hivrna$hiv_rna[w1])
w0 <- which(hivrna$coded_week == week & hivrna$rx==0)
hivrna.placebo[tt] <- mean(hivrna$hiv_rna[w0])
}
plot(y=hivrna.trt, x=coded_week,
ylab="CD4+ T Cell Count per uL", ylim=c(300, 800),
xlab="Weeks Since Seroconversion", xaxt="n",
col="blue", pch=16, type="b")
axis(side=1, at=coded_week, labels=coded_week)
points(y=hivrna.placebo, x=coded_week, col="red", type="b", pch=16)
legend("topright", legend=c("Placebo", "FTC/TDF"), pch=16, col=c("red", "blue"))
plot(y=hivrna.trt, x=coded_week,
ylab="CD4+ T Cell Count per uL", #ylim=c(300, 800),
xlab="Weeks Since Seroconversion", xaxt="n",
col="blue", pch=16, type="b")
axis(side=1, at=coded_week, labels=coded_week)
points(y=hivrna.placebo, x=coded_week, col="red", type="b", pch=16)
legend("topright", legend=c("Placebo", "FTC/TDF"), pch=16, col=c("red", "blue"))
par(mfrow=c(1,2), pty="s")
hist(hivrna$hiv_rna)
hist(log(hivrna$hiv_rna)) # no need to log-transform
par(mfrow=c(1,2), pty="s")
hist(hivrna$hiv_rna)
hist(10^(hivrna$hiv_rna)) # no need to log-transform
plot(y=hivrna.trt, x=coded_week,
ylab="Plasma HIV RNA Level (Copies/mL)",
xlab="Weeks Since Seroconversion", xaxt="n", yaxt="n",
col="blue", pch=16, type="b")
plot(y=hivrna.trt, x=coded_week,
ylab="Plasma HIV RNA Level log10(Copies/mL)",
xlab="Weeks Since Seroconversion", xaxt="n",
col="blue", pch=16, type="b")
axis(side=1, at=coded_week, labels=coded_week)
points(y=hivrna.placebo, x=coded_week, col="red", type="b", pch=16)
legend("topright", legend=c("Placebo", "FTC/TDF"), pch=16, col=c("red", "blue"))
plot(y=hivrna.trt, x=coded_week,
ylab="Plasma HIV RNA Level log10(Copies/mL)",
xlab="Weeks Since Seroconversion", xaxt="n",
col="blue", pch=16, type="b")
axis(side=1, at=coded_week, labels=coded_week)
points(y=hivrna.placebo, x=coded_week, col="red", type="b", pch=16)
legend("topright", legend=c("Placebo", "FTC/TDF"), pch=16, col=c("red", "blue"))
plot(y=hivrna.trt, x=coded_week, ylim=c(2,6),
ylab="Plasma HIV RNA Level log10(Copies/mL)",
xlab="Weeks Since Seroconversion", xaxt="n",
col="blue", pch=16, type="b")
axis(side=1, at=coded_week, labels=coded_week)
points(y=hivrna.placebo, x=coded_week, col="red", type="b", pch=16)
legend("topright", legend=c("Placebo", "FTC/TDF"), pch=16, col=c("red", "blue"))
hivrna$coded_week2 <- hivrna$coded_week^2
hivrna$coded_week2 <- hivrna$coded_week^2
lmm1 <- lme(hiv_rna ~ rx + coded_week + coded_week2 + rx:coded_week + rx:coded_week2,
random = ~1|publicid, method = "ML", data=hivrna)
summary(lmm1)
lmm2 <- lme(hiv_rna ~ rx + coded_week + rx:coded_week,
random = ~1|publicid, method = "ML", data=hivrna)
summary(lmm2)
lmm3 <- lme(hiv_rna ~ coded_week + coded_week2,
random = ~1|publicid, method = "ML", data=hivrna)
summary(lmm3)
lmm4 <- lme(hiv_rna ~ coded_week,
random = ~1|publicid, method = "ML", data=hivrna)
summary(lmm4)
anova(lmm1, lmm2, lmm3, lmm4)
summary(lmm2)
anova(lmm1, lmm2, lmm3, lmm4)
# plot
hivrna$hiv_rna <- 10^hivrna$hiv_rna
table(hivrna$coded_week)
coded_week <- as.numeric(names(table(hivrna$coded_week)))
n.visit <- length(table(hivrna$coded_week))
mat = match(hivrna$publicid, hivfollowup$publicid)
hivrna$event <- hivfollowup$event[mat]
hivrna$rx <- hivfollowup$rx[mat]
all(hivfollowup$publicid[hivfollowup$event==1] %in% unique(hivrna$publicid)) # TRUE
hivrna.trt <- rep(NA, n.visit)
hivrna.placebo <- rep(NA, n.visit)
for (tt in 1:n.visit) {
week <- coded_week[tt]
w1 <- which(hivrna$coded_week == week & hivrna$rx==1)
hivrna.trt[tt] <- mean(hivrna$hiv_rna[w1])
w0 <- which(hivrna$coded_week == week & hivrna$rx==0)
hivrna.placebo[tt] <- mean(hivrna$hiv_rna[w0])
}
plot(y=log10(hivrna.trt), x=coded_week, ylim=c(2,6),
ylab="Plasma HIV RNA Level log10(Copies/mL)",
xlab="Weeks Since Seroconversion", xaxt="n",
col="blue", pch=16, type="b")
axis(side=1, at=coded_week, labels=coded_week)
points(y=log10(hivrna.placebo), x=coded_week, col="red", type="b", pch=16)
legend("topright", legend=c("Placebo", "FTC/TDF"), pch=16, col=c("red", "blue"))
154000*9/12
154000/9*12
128750/9*12
128750/9*11
199800/9*11
15766.67*12
175000*1.1
14333*12
172000*1.12
172000*1.1
172000*1.1
172000*1.12
172000*1.15
196000/172000
172000*1.12
172000*1.12*1.03
172000*1.12*1.04
196000*1.02
196000*1.03
196000/172000
172000*1.03
172000*1.025
172000*1.02
172000*1.12
172000*1.13
172000*1.14
175000*1.12
34.5+102.39+41.04+40+76.8+623+623+37+21+18+13+14+35+58
34.5+40+76.8+623&2
34.5+40+76.8+623*2
34.5+102.39+41.04+40+76.8+623+623
1736-1528
208/7
remove.packages("LOCOM")
library("LOCOM")
install.packages(c("Rcpp", "RcppArmadillo", "metap", "utils", "psych", "permute", "parallel", "devtools", "BiocManager"))
BiocManager::install("BiocParallel")
install.packages(c("Rcpp", "RcppArmadillo", "metap", "utils", "psych", "permute", "parallel", "devtools", "BiocManager"))
library("LOCOM")
BiocManager::install("BiocParallel")
library("LOCOM")
devtools::install_github("yijuanhu/LOCOM")
library("LOCOM")
setwd("~/OneDrive - Emory University/yijuanhu/_RESEARCH/PUBLISHED/Microbiome_compositional/R_LOCOM_package/debug")
load("seed_1_otu.RData")
otu.table.filter = out.data[[1]]
x.true = out.data[[2]]
x2 = out.data[[3]]
res <- locom(otu.table = otu.table.filter, Y = x.true, C = x2,
fdr.nominal = 0.05, seed = 1 ,prev.cut = 0, # I have already done the filter.
adjustment = "Sandev", n.cores = 4)
res$p.global
setwd("~/OneDrive - Emory University/yijuanhu/_RESEARCH/PUBLISHED/Microbiome_compositional/R_LOCOM_package/LOCOM/simulation_Com2seq")
library(dirmult)
library(parallel)
library(permute)
library(matrixStats)
library(abind)
library(Rcpp)
library(RcppArmadillo)
source("Com2seq_fun.R")
source("LOCOM_fun.R")
sourceCpp("Newton.cpp")
library(Rcpp)
library(RcppArmadillo)
source("Com2seq_fun.R")
source("LOCOM_fun.R")
sourceCpp("Newton.cpp")
sourceCpp("./src/Newton.cpp")
setwd("~/OneDrive - Emory University/yijuanhu/_RESEARCH/PUBLISHED/Microbiome_compositional/R_LOCOM_package/LOCOM/simulation_Com2seq")
sourceCpp("./src/Newton.cpp")
sourceCpp(".src/Newton.cpp")
sourceCpp("src/Newton.cpp")
getwd()
sourceCpp("Newton.cpp")
writeLines(strsplit(Sys.getenv("PATH"), ";")[[1L]])
setwd("~/OneDrive - Emory University/yijuanhu/_RESEARCH/IN-PROGRESS/Microbiome_16S_shotgun/R")
source("LOCOM_com_omni_fun_general.R")
source("LOCOM_fun.R")
sourceCpp("LOCOM.cpp")
sourceCpp("LOCOM_rob.cpp")
-v
R.version()
R.version
sourceCpp("Newton.cpp")
setwd("~/OneDrive - Emory University/yijuanhu/_RESEARCH/PUBLISHED/Microbiome_compositional/R_LOCOM_package/LOCOM/simulation_Com2seq")
sourceCpp("Newton.cpp")
sourceCpp("Newton.cpp")
sourceCpp("Newton.cpp")
CXX_STD = CXX11
library(LOCOM)
library(LOCOM)
library(testthat)
data("otu.table.1")
data("otu.table.2")
data("meta.1")
data("meta.2")
# preparing Y1, Y2, C1, C2
Y1 <- model.matrix(~meta.1[,"Y"])[,-1] # get design matrix for a three-level factor
Y2 <- model.matrix(~meta.2[,"Y"])[,-1]
C1 <- meta.1[,"C"]
C2 <- meta.2[,"C"]
# restricting to a subset of samples and OTUs for speed
sub.sam.1 <- c(31:60)
sub.sam.2 <- c(1:20, 51:60)
otu.table.1 <- otu.table.1[sub.sam.1, 1:70]
otu.table.2 <- otu.table.2[sub.sam.2, 1:70]
Y1 <- Y1[sub.sam.1,]
C1 <- C1[sub.sam.1]
Y2 <- Y2[sub.sam.2,]
C2 <- C2[sub.sam.2]
# test
test_that("`Com2seq` function provides expected results", {
res.Com2seq <- Com2seq(table1 = otu.table.1, table2 = otu.table.2, Y1 = Y1, Y2 = Y2, C1 = C1, C2 = C2,
seed = 123, n.cores = 1, n.perm.max = 1000)
res_p <- signif(res.Com2seq$p.global.omni, 3)
expect_equivalent(res_p, 0.049)
})
res.Com2seq <- Com2seq(table1 = otu.table.1, table2 = otu.table.2, Y1 = Y1, Y2 = Y2, C1 = C1, C2 = C2,
seed = 123, n.cores = 1, n.perm.max = 1000)
